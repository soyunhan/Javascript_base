20)
길이가 다른 배열을 비교하려면
JSON.stringify를 통해 문자열로 변경해 준 뒤 비교하는 방법이 있다.

*교집합(Intersection)
let intersection = arr1.filter(x => arr2.includes(x))

*차집합(difference)
let difference = arr1.filter(x => !arr2.includes(x))

*대칭차집합(Symmetric difference)
let difference = arr1.filter(x => !arr2.includes(x))
                     .concat(arr2.filter(x => !arr1.includes(x)));                   


//콜백함수와 리듀스의 연관성
//불변성 관련해서 코드를 짜보기..
//primise 데이터 받아와서 벗겨내는걸 많이 쓴다 프론트단에서는

//리팩토링체크기준 - 가독성 시간복잡도(시간이 적은 메소드사용) 불편성체크

const originalObject = {
  a: 'hello',
  b: 'world',
  c: {
    d: 'foo',
    e: 'bar'
  }
};

// 객체 내부의 속성에 원시값을 할당하면 복사본을 만들어 변경합니다
const updatedObject = {
  ...originalObject,
  a: 'hi'
};

// 깊은 복사를 사용하여 객체 내부의 속성을 변경합니다
const updatedObject2 = {
  ...originalObject,
  c: {
    ...originalObject.c,
    d: 'baz'
  }
};

console.log(originalObject); // { a: 'hello', b: 'world', c: { d: 'foo', e: 'bar' } }
console.log(updatedObject); // { a: 'hi', b: 'world', c: { d: 'foo', e: 'bar' } }
console.log(updatedObject2); // { a: 'hello', b: 'world', c: { d: 'baz', e: 'bar' } }
